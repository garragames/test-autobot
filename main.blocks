<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="(^Y(-(kq}mPiqjnX6|](" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id=";F0t}I`A5hMa@`OKn8X4" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace autoBot {" line1="" line2="    const MIN_VEL = 150;  //   0 km/hr" line3="    const MAX_VEL = 1023; // 100 km/hr" line4="    const FIRST   = 20;" line5="    const SECOND  = 40;" line6="    const THIRD   = 60;" line7="    const FOURTH  = 80;" line8="    const FIFTH   = 100;" line9="    const NEUTRAL = 0;" line10="    const PARKING = 1;" line11="    const REVERSE = 2;" line12="    const DRIVE   = 3;" line13="    const ENGINE_STATE = 0;" line14="    const BELT_STATE = 1;" line15="" line16="" line17="    /**" line18="     * Setup variables, pins and enumerations" line19="     */" line20="" line21="    // Disable LED Matrix" line22="    led.enable(true) // Set true to DEBUG" line23="" line24="    // OnOff Sates" line25="    export enum OnOff {" line26="        //% block=&quot;off&quot;" line27="        //% block.loc.es-ES=&quot;apagado&quot;" line28="        //% jres=icons.engine-off" line29="        Off = 0," line30="        //% block=&quot;on&quot;" line31="        //% block.loc.es-ES=&quot;encendido&quot;" line32="        //% jres=icons.engine-on" line33="        On = 1" line34="    }" line35="    " line36="    // Directions" line37="    export enum Directions {" line38="        //% block=&quot;left&quot;" line39="        //% block.loc.es-ES=&quot;izquierda&quot;" line40="        //% jres=icons.direction-left" line41="        Left = 1," line42="        //% block=&quot;front&quot;" line43="        //% block.loc.es-ES=&quot;frente&quot;" line44="        //% jres=icons.direction-front" line45="        Front = 2," line46="        //% block=&quot;right&quot;" line47="        //% block.loc.es-ES=&quot;derecha&quot;" line48="        //% jres=icons.direction-right" line49="        Right = 3" line50="    }" line51="" line52="    // Seat Belt States" line53="    export enum BeltStates {" line54="        //% block=&quot;unfasten&quot;" line55="        //% block.loc.es-ES=&quot;desabrochado&quot;" line56="        //% jres=icons.belt-unfasten" line57="        Unfasten = 1," line58="        //% block=&quot;fasten&quot;" line59="        //% block.loc.es-ES=&quot;abrochado&quot;" line60="        //% jres=icons.belt-fasten" line61="        Fasten = 2" line62="" line63="    }" line64="" line65="    // Signs" line66="    export enum Signs {" line67="        //% block=&quot;stop&quot;" line68="        //% block.loc.es-ES=&quot;alto&quot;" line69="        //% jres=icons.stop-sign" line70="        Stop = 0," line71="        //% block=&quot;left&quot;" line72="        //% block.loc.es-ES=&quot;izquierda&quot;" line73="        //% jres=icons.left-sign" line74="        Left = 1," line75="        //% block=&quot;forward&quot;" line76="        //% block.loc.es-ES=&quot;adelante&quot;" line77="        //% jres=icons.forward-sign" line78="        Forward = 2," line79="        //% block=&quot;backward&quot;" line80="        //% block.loc.es-ES=&quot;atrás&quot;" line81="        //% jres=icons.backward-sign" line82="        //Backward = 3," line83="        //% block=&quot;right&quot;" line84="        //% block.loc.es-ES=&quot;derecha&quot;" line85="        //% jres=icons.right-sign" line86="        Right = 4" line87="    }" line88="" line89="    // Manual Gears" line90="    export enum ManualGears {" line91="        //% block=&quot;first gear&quot;" line92="        //% block.loc.es-ES=&quot;primera velocidad&quot;" line93="        //% jres=icons.first-gear" line94="        First = FIRST," line95="        //% block=&quot;third gear&quot;" line96="        //% block.loc.es-ES=&quot;tercera velocidad&quot;" line97="        //% jres=icons.third-gear" line98="        Third = THIRD," line99="        //% block=&quot;fifth gear&quot;" line100="        //% block.loc.es-ES=&quot;quinta velocidad&quot;" line101="        //% jres=icons.neutral-gear" line102="        Neutral = NEUTRAL," line103="        //% block=&quot;second gear&quot;" line104="        //% block.loc.es-ES=&quot;segunda velocidad&quot;" line105="        //% jres=icons.second-gear" line106="        Second = SECOND," line107="        //% block=&quot;fourth gear&quot;" line108="        //% block.loc.es-ES=&quot;cuarta velocidad&quot;" line109="        //% jres=icons.fourth-gear" line110="        Fourth = FOURTH," line111="        //% block=&quot;reverse gear&quot;" line112="        //% block.loc.es-ES=&quot;reversa&quot;" line113="        //% jres=icons.reverse-gear" line114="        Reverse = 20" line115="    }" line116="" line117="    // Automatic Gears" line118="    export enum AutomaticGears {" line119="        //% block=&quot;first gear&quot;" line120="        //% block.loc.es-ES=&quot;primera velocidad&quot;" line121="        //% jres=icons.parking-gear" line122="        AParking = PARKING," line123="        //% block=&quot;third gear&quot;" line124="        //% block.loc.es-ES=&quot;tercera velocidad&quot;" line125="        //% jres=icons.reverse-gear" line126="        AReverse = REVERSE," line127="        //% block=&quot;fifth gear&quot;" line128="        //% block.loc.es-ES=&quot;quinta velocidad&quot;" line129="        //% jres=icons.neutral-gear" line130="        ANeutral = NEUTRAL," line131="        //% block=&quot;second gear&quot;" line132="        //% block.loc.es-ES=&quot;segunda velocidad&quot;" line133="        //% jres=icons.drive-gear" line134="        ADrive = DRIVE," line135="        //% block=&quot;fourth gear&quot;" line136="        //% block.loc.es-ES=&quot;cuarta velocidad&quot;" line137="        //% jres=icons.second-gear" line138="        ASecond = SECOND," line139="        //% block=&quot;reverse gear&quot;" line140="        //% block.loc.es-ES=&quot;reversa&quot;" line141="        //% jres=icons.first-gear" line142="        AFirst = FIRST" line143="    }" line144="    /**" line145="     * Set Speed" line146="     * @param gear" line147="     */" line148="    function setSpeed(gear: number): void {" line149="        let s = gear * (MAX_VEL - MIN_VEL) / 100 + MIN_VEL; // Adjust to the min and max PWM values" line150="        // PWM para izquierdo" line151="        pins.analogWritePin(AnalogPin.P8, s)" line152="        // PWM para derecho" line153="        pins.analogWritePin(AnalogPin.P16, s)" line154="    }" line155="" line156="    // Stop motors" line157="    _stop()" line158="" line159="    // Set initial gear" line160="    // setSpeed(Gears.First); /// TODO: NEUTRAL" line161="" line162="    /**" line163="     * Gear Selector" line164="     * @param gear" line165="     */" line166="    //% blockId=getGear" line167="    //% block=&quot;$gear&quot;" line168="    //% gear.defl=Gears.third" line169="    //% gear.fieldEditor=&quot;imagedropdown&quot;" line170="    //% gear.fieldOptions.columns=3" line171="    //% gear.fieldOptions.width=&quot;225&quot;" line172="    //% gear.fieldOptions.maxRows=2" line173="    //% group=&quot;Variables&quot;" line174="    export function getGear(gear: ManualGears): number {" line175="        return gear" line176="    }" line177="" line178="    /**" line179="    * Direction Selector" line180="    * @param direction" line181="    */" line182="    //% blockId=getDirection" line183="    //% block=&quot;$direction&quot;" line184="    //% direction.defl=Directions.front" line185="    //% direction.fieldEditor=&quot;imagedropdown&quot;" line186="    //% direction.fieldOptions.columns=3" line187="    //% direction.fieldOptions.width=&quot;225&quot;" line188="    //% direction.fieldOptions.maxRows=2" line189="    //% group=&quot;Variables&quot;" line190="    export function getDirection(direction: Directions): number {" line191="        return direction" line192="    }" line193="" line194="    /**" line195="     * Seat belt status" line196="     * @param status" line197="     */" line198="    //% blockId=setSeatbelt" line199="    //% block=&quot;seat belt $status&quot;" line200="    //% block.loc.es-ES=&quot;cinturón de seguridad $status&quot;" line201="    //% status.defl=BeltStates.unfasten" line202="    //% status.fieldEditor=&quot;imagedropdown&quot;" line203="    //% status.fieldOptions.columns=2" line204="    //% status.fieldOptions.width=&quot;150&quot;" line205="    //% status.fieldOptions.maxRows=1" line206="    //% group=&quot;Commands&quot;" line207="    export function belt(status: BeltStates): void {" line208="        " line209="    }" line210="    " line211="    /**" line212="    * Sign Selector" line213="    * @param sign" line214="    */" line215="    //% blockId=getSign" line216="    //% block=&quot;$sign&quot;" line217="    //% block." line218="    //% sign.fieldEditor=&quot;imagedropdown&quot;" line219="    //% sign.fieldOptions.columns=4" line220="    //% sign.fieldOptions.width=&quot;300&quot;" line221="    //% sign.fieldOptions.maxRows=2" line222="    //% group=&quot;Variables&quot;    " line223="    export function getSign(sign: Signs): number {" line224="        return sign" line225="    }" line226="" line227="    /**" line228="     * Detects the tilt of the micro:bit card via the accelerometer" line229="     * @returns " line230="     */" line231="    //% blockId=senseAcelerometer" line232="    //% block=&quot;sense acelerometer&quot;" line233="    //% block.loc.es-ES=&quot;detectar acelerómetro&quot;" line234="    //% group=&quot;Sensors&quot;" line235="    export function senseAcelerometer(): number {" line236="        return 0" line237="    }" line238="" line239="    /**" line240="     * Detects distance through ultrasonic sensor" line241="     * @returns " line242="     */" line243="    //% blockId=senseDistance" line244="    //% block=&quot;sense distance&quot;" line245="    //% block.loc.es-ES=&quot;detectar distancia&quot;" line246="    //% group=&quot;Sensors&quot;" line247="    export function senseDistance(): number {" line248="        return 0" line249="    }" line250="" line251="    /**" line252="     * Detects the line through the five infrared sensors in front of the AutoBot, and returns forward, backward, left, right or stop." line253="     */" line254="    //% blockId=senseLine" line255="    //% block=&quot;sense line&quot;" line256="    //% block.loc.es-ES=&quot;detectar línea&quot;" line257="    //% group=&quot;Sensors&quot;" line258="    export function senseLine(): Signs {" line259="        if (pins.digitalReadPin(DigitalPin.P0) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P1) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P2) == 0 &amp;&amp; (pins.digitalReadPin(DigitalPin.P3) == 1 &amp;&amp; pins.digitalReadPin(DigitalPin.P4) == 1)))) {" line260="            return Signs.Forward" line261="        } else" line262="            if (pins.digitalReadPin(DigitalPin.P0) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P1) == 0 &amp;&amp; (pins.digitalReadPin(DigitalPin.P2) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P3) == 1 &amp;&amp; pins.digitalReadPin(DigitalPin.P4) == 1)))) {" line263="                return Signs.Left" line264="            } else" line265="                if (pins.digitalReadPin(DigitalPin.P0) == 0 &amp;&amp; (pins.digitalReadPin(DigitalPin.P1) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P2) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P3) == 1 &amp;&amp; pins.digitalReadPin(DigitalPin.P4) == 1)))) {" line266="                    return Signs.Left" line267="                } else" line268="                    if (pins.digitalReadPin(DigitalPin.P0) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P1) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P2) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P3) == 0 &amp;&amp; pins.digitalReadPin(DigitalPin.P4) == 1)))) {" line269="                        return Signs.Right" line270="                    } else" line271="                        if (pins.digitalReadPin(DigitalPin.P0) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P1) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P2) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P3) == 1 &amp;&amp; pins.digitalReadPin(DigitalPin.P4) == 0)))) {" line272="                            return Signs.Right" line273="                        } else" line274="                            if (pins.digitalReadPin(DigitalPin.P0) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P1) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P2) == 1 &amp;&amp; (pins.digitalReadPin(DigitalPin.P3) == 1 &amp;&amp; pins.digitalReadPin(DigitalPin.P4) == 1)))) {" line275="                                return Signs.Stop" line276="                            }" line277="        return Signs.Stop // If no condition then Stop motors" line278="    }" line279="" line280="    /**" line281="     * Stop the autobot" line282="     */" line283="    export function _stop(): void {" line284="        pins.digitalWritePin(DigitalPin.P12, 0)" line285="        pins.digitalWritePin(DigitalPin.P13, 0)" line286="        pins.digitalWritePin(DigitalPin.P14, 0)" line287="        pins.digitalWritePin(DigitalPin.P15, 0)" line288="    }" line289="" line290="    /**" line291="     * Turn the autobot right" line292="     */" line293="    export function _right(): void {" line294="        pins.digitalWritePin(DigitalPin.P12, 0)" line295="        pins.digitalWritePin(DigitalPin.P13, 0)" line296="        pins.digitalWritePin(DigitalPin.P14, 1)" line297="        pins.digitalWritePin(DigitalPin.P15, 0)" line298="    }" line299="" line300="    /**" line301="    * Turn the autobot left" line302="    */" line303="    export function _left(): void {" line304="        pins.digitalWritePin(DigitalPin.P12, 0)" line305="        pins.digitalWritePin(DigitalPin.P13, 1)" line306="        pins.digitalWritePin(DigitalPin.P14, 0)" line307="        pins.digitalWritePin(DigitalPin.P15, 0)" line308="    }" line309="" line310="    /**" line311="     * Moves the autobot backward" line312="     */" line313="    export function _backward(): void {" line314="        pins.digitalWritePin(DigitalPin.P12, 1)" line315="        pins.digitalWritePin(DigitalPin.P13, 0)" line316="        pins.digitalWritePin(DigitalPin.P14, 0)" line317="        pins.digitalWritePin(DigitalPin.P15, 1)" line318="    }" line319="" line320="" line321="    /**" line322="     * Moves the autobot forward" line323="     */" line324="    export function _forward(): void {" line325="        pins.digitalWritePin(DigitalPin.P12, 0)" line326="        pins.digitalWritePin(DigitalPin.P13, 1)" line327="        pins.digitalWritePin(DigitalPin.P14, 1)" line328="        pins.digitalWritePin(DigitalPin.P15, 0)" line329="    }" line330="" line331="" line332="    /**" line333="    * Turn Engine On/Off" line334="    * @param state" line335="    */" line336="    //% blockId=setEngine" line337="    //% block=&quot;turn engine $state&quot;" line338="    //% block.loc.es-ES=&quot;motor $state&quot;" line339="    //% state.defl=OnOff.off" line340="    //% state.fieldEditor=&quot;imagedropdown&quot; " line341="    //% state.fieldOptions.columns=2" line342="    //% state.fieldOptions.width=&quot;150&quot;" line343="    //% state.fieldOptions.maxRows=1" line344="    //% group=&quot;Commands&quot;" line345="    export function setEngine(state: OnOff): void {" line346="" line347="    }" line348="    /**" line349="    * Set Direction" line350="    * @param direction" line351="    */" line352="    //% blockId=turnDirection" line353="    //% block=&quot;turn direction $direction&quot;" line354="    //% block.loc.es-ES=&quot;girar volante $direction&quot;" line355="    //% direction.defl=Directions.front" line356="    //% direction.fieldEditor=&quot;imagedropdown&quot; " line357="    //% direction.fieldOptions.columns=3" line358="    //% direction.fieldOptions.width=&quot;225&quot;" line359="    //% direction.fieldOptions.maxRows=1" line360="    //% group=&quot;Commands&quot;" line361="    export function turnDirection(direction: Directions): void {" line362="        " line363="    }" line364="" line365="    /**" line366="    * Set Gear" line367="    * @param gear" line368="    */" line369="    //% blockId=setGear" line370="    //% block=&quot;set gear $gear&quot;" line371="    //% block.loc.es-ES=&quot;cambiar velocidad $gear&quot;" line372="    //% gear.defl=Gears.Third" line373="    //% gear.fieldEditor=&quot;imagedropdown&quot; " line374="    //% gear.fieldOptions.columns=3" line375="    //% gear.fieldOptions.width=&quot;225&quot;" line376="    //% gear.fieldOptions.maxRows=2" line377="    //% group=&quot;Commands&quot;" line378="    export function setGear(gear: ManualGears): void {" line379="        setSpeed(gear)" line380="    }" line381="" line382="    /**" line383="        * Set Automatic Gear " line384="        * @param gear" line385="        */" line386="    //% blockId=setAutomaticGear" line387="    //% block=&quot;set gear $gear&quot;" line388="    //% block.loc.es-ES=&quot;cambiar velocidad $gear&quot;" line389="    //% gear.defl=Gears.Third" line390="    //% gear.fieldEditor=&quot;imagedropdown&quot; " line391="    //% gear.fieldOptions.columns=1" line392="    //% gear.fieldOptions.width=&quot;75&quot;" line393="    //% gear.fieldOptions.maxRows=6" line394="    //% group=&quot;Commands&quot;" line395="    export function setAutomaticGear(gear: AutomaticGears): void {" line396="        setSpeed(gear)" line397="    }" line398="" line399="    /**" line400="     * Start" line401="     */" line402="    //% blockId=start" line403="    //% block=&quot;start&quot;" line404="    //% block.loc.es-ES=&quot;arrancar&quot;" line405="    //% group=&quot;Movements&quot;" line406="    export function start(): void {" line407="" line408="    }" line409="" line410="    /**" line411="     * Stop" line412="     */" line413="    //% blockId=brake" line414="    //% block=&quot;stop&quot;" line415="    //% block.loc.es-ES=&quot;detenerse&quot;" line416="    //% group=&quot;Movements&quot;" line417="    export function stop(): void {" line418="" line419="    }" line420="" line421="    /**" line422="     * Compares two values and returns true if equal or false if not equal" line423="     * @param A" line424="     * @param B" line425="     */" line426="    //% blockId=compare" line427="    //% block=&quot;$A equal to $B&quot;" line428="    //% block.loc.es-ES=&quot;$A igual a $B&quot;" line429="    //% B.fieldEditor=&quot;imagedropdown&quot;" line430="    //% B.fieldOptions.columns=4" line431="    //% B.fieldOptions.width=&quot;300&quot;" line432="    //% B.fieldOptions.maxRows=1" line433="    //% group=&quot;Logic&quot;" line434="    export function compare(A: number, B: Signs): boolean {" line435="        return A == B" line436="    }    " line437="}" numlines="438"></mutation></block></statement></block></xml>